✅ Step-by-Step: ChirpStack Docker Installation (Raspberry Pi)
⚙️ Step 1: Install Docker & Docker Compose
bash
Copy
Edit
sudo apt update
sudo apt install -y docker.io docker-compose git
sudo usermod -aG docker $USER
newgrp docker  # apply group changes immediately
📦 Step 2: Clone ChirpStack Docker Repository
bash
Copy
Edit
git clone https://github.com/chirpstack/chirpstack-docker.git
cd chirpstack-docker
🌎 Step 3: Configure ChirpStack for US915 (Region & Channels)
3.1. Edit docker-compose.yml
Open:

bash
Copy
Edit
nano docker-compose.yml
Find the chirpstack service block and edit the environment section:

yaml
Copy
Edit
  chirpstack:
    ...
    environment:
      - region=us915_0
us915_0 = sub-band channels 0–7 (make sure your STM32 uses this sub-band)

3.2. Edit chirpstack/chirpstack.toml
bash
Copy
Edit
nano chirpstack/chirpstack.toml
Find this section and set enabled channels:

toml
Copy
Edit
[network_server.network_settings]
enabled_uplink_channels=[0,1,2,3,4,5,6,7]
This matches US915 sub-band 0 (channels 902.3–903.0 MHz).

📶 Step 4: Point Gateway Packet Forwarder to ChirpStack
Edit your global_conf.json.sx1250.US915 or equivalent:

json
Copy
Edit
"server_address": "127.0.0.1",
"serv_port_up": 1700,
"serv_port_down": 1700,
Then restart lora_pkt_fwd.

🚀 Step 5: Start ChirpStack
bash
Copy
Edit
docker-compose up -d
Wait ~30 seconds for services to initialize.

🌐 Step 6: Access ChirpStack UI
Go to:

cpp
Copy
Edit
http://<your-raspberry-pi-ip>:8080
Default login:

Username: admin

Password: admin

🛠️ Post-Setup Configuration (Once UI is Up)
✅ Create Network Server
Go to Network Servers > Add

Name: LocalNS

Server: localhost:8000

Set to default

✅ Create Gateway
Gateway ID: must match what appears in lora_pkt_fwd logs (e.g., 00000000FFFFFFFF)

Frequency Plan: US915

Description: anything you like

✅ Create Device Profile
LoRaWAN MAC Version: 1.0.2 or 1.0.3 (depending on STM32 firmware)

Class: A

Add custom codec (next step)

✅ Add Payload Decoder
Go to Applications > Your Application > Payload Codec and paste this:

javascript
Copy
Edit
function decodeUplink(input) {
  var text = String.fromCharCode.apply(null, input.bytes);
  return {
    data: {
      message: text
    }
  };
}
✅ Add Device
DevEUI, AppKey: match your STM32 firmware

Device Profile: use the one you made

Activate using OTAA or ABP depending on how your STM32 is configured

🔎 Monitor Data
Go to Device > Live Device Data

You’ll see decoded payloads like:

json
Copy
Edit
{
  "message": "Hello 7"
}
Would you like me to generate pre-edited config files (chirpstack.toml, docker-compose.yml, global_conf.json) and send them to you as a zip?
