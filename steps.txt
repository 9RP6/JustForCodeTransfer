✅ Step 0: System Prep (Raspberry Pi OS)
Make sure your system is updated:

bash
Copy
Edit
sudo apt update
sudo apt upgrade -y
Install basic tools:

bash
Copy
Edit
sudo apt install -y curl apt-transport-https redis-server mosquitto
✅ Step 1: Add ChirpStack APT Repository
Add the ChirpStack repo:

bash
Copy
Edit
sudo tee /etc/apt/sources.list.d/chirpstack.list <<EOF
deb https://artifacts.chirpstack.io/packages/ stable main
EOF

curl -fsSL https://artifacts.chirpstack.io/packages/public.gpg | sudo tee /etc/apt/trusted.gpg.d/chirpstack.gpg > /dev/null
Update and install components:

bash
Copy
Edit
sudo apt update
✅ Step 2: Install ChirpStack Components
Install:

bash
Copy
Edit
sudo apt install chirpstack chirpstack-gateway-bridge postgresql
✅ Step 3: Setup PostgreSQL Database
Switch to PostgreSQL user and set up:

bash
Copy
Edit
sudo -u postgres psql
Run these commands:

sql
Copy
Edit
CREATE ROLE chirpstack WITH LOGIN PASSWORD 'chirpstack';
CREATE DATABASE chirpstack WITH OWNER chirpstack;
\q
Then edit config:

bash
Copy
Edit
sudo nano /etc/chirpstack/chirpstack.toml
Find and update:

toml
Copy
Edit
dsn="postgres://chirpstack:chirpstack@localhost/chirpstack?sslmode=disable"
✅ Step 4: Configure Gateway Bridge
Edit the config:

bash
Copy
Edit
sudo nano /etc/chirpstack-gateway-bridge/chirpstack-gateway-bridge.toml
Ensure it listens to your UDP packet forwarder (e.g., lora_pkt_fwd):

toml
Copy
Edit
[backend.semtech_udp]
enabled=true
udp_bind = "0.0.0.0:1700"
✅ Step 5: Enable and Start Services
bash
Copy
Edit
sudo systemctl enable chirpstack
sudo systemctl start chirpstack

sudo systemctl enable chirpstack-gateway-bridge
sudo systemctl start chirpstack-gateway-bridge

sudo systemctl enable redis
sudo systemctl start redis

sudo systemctl enable mosquitto
sudo systemctl start mosquitto
✅ Step 6: Web UI Access
Once running, you can access the ChirpStack web UI at:

cpp
Copy
Edit
http://<YOUR_RPI_IP>:8080
Login credentials (default):

Username: admin

Password: admin

You can now:

Add your gateway using the Gateway ID from lora_pkt_fwd logs

Register your STM32/LoRa-E5 end device

Set up decoding as explained earlier using the JS codec

✅ Optional: Packet Forwarder Config
Make sure your global_conf.json.sx1250.US915 on the Pi has:

json
Copy
Edit
"server_address": "127.0.0.1",
"serv_port_up": 1700,
"serv_port_down": 1700,
Restart lora_pkt_fwd and everything should flow.

Summary
Component	Install Method
ChirpStack Server	APT
Gateway Bridge	APT
PostgreSQL	APT
Redis, Mosquitto	APT
Web UI	http://<pi>:8080
